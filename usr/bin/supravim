#!/usr/bin/env python3
import re
import os
import optparse as op

# ---------
#   UTILS
# ---------
home = os.getenv('HOME')
cfg_dir = f'{home}/.local/share/supravim'
cfg_fpath = f'{home}/.local/share/supravim/supravim.cfg'
rc_path = f'{home}/.vimrc'
sv_options = {}


def print_error(msg: str):
    print(f"\033[1;91mError: \033[0;91m{msg}\033[m")

def replace_in_file(file: str, to_replace: str, replacement: str):
    with open(file, 'r') as f:
        content = f.read()
    content = content.replace(to_replace, replacement, 1)
    with open(file, 'w') as f:
        f.write(content)

def parse_options(opts: list[str]) -> list[str]:
    return [elem for opt in opts for elem in opt.split(',')]

def getOptions() -> type(op.OptionGroup):
    parser = op.OptionParser()
    # Add options
    description = 'Program to personnalize your supravim.'
    parser.set_description(description)

    parser.add_option("-s", "--status",
                      action="store_true", dest="status",
                      help="Display status of your supravim config.")
    parser.add_option("-v", "--version",
                      action="store_true", dest="version",
                      help="Give your supravim version")
    parser.add_option("--update",
                      action="store_true", dest="update",
                      help="Update supravim")
    parser.add_option("--uninstall",
                      action="store_true", dest="uninstall",
                      help="Uninstall supravim")
    parser.add_option("--save-config",
                      action="store_true", dest="save_conf")
    parser.add_option("--apply-config",
                      action="store_true", dest="apply_conf")
    parser.add_option("-d", "--disable",
                      action='append', type="string", dest="disabled",
                      help="Disable options.", metavar='optA[,optB]')
    parser.add_option("-e", "--enable",
                      action="append", type="string", dest="enabled",
                      help="Enable options.", metavar='optA[,optB]')
    parser.add_option("-t", "--theme",
                      action="store", type="string", dest="theme",
                      help="Set theme.", metavar='theme')
    parser.add_option("-S", "--set",
                      action="append", type="string", dest="set",
                      help="Set plugin variables.", metavar='var=value')

    # Parse the command-line arguments
    (options, args) = parser.parse_args()
    return options

def suprapack_launcher(command: str):
    os.system('suprapack ' + command + ' supravim')

# ----------
# Pre launch --> Generating options with plugins installed
# ----------
def load_options_from_file(file_name: str):
    if not os.access(file_name, os.F_OK):
        return
    try:
        with open(file_name, 'r') as file:
            content = file.read()
            matches = re.findall(r'^g:sp_[a-zA-Z_]+ = (?:[a-zA-Z0-9\']+).+$',
                                 content, re.RegexFlag.MULTILINE)
            for match in matches:
                name, _, value = match[5:].split()[0:3]
                sv_options[name] = [file_name, value]
                if '#' in match:
                    _, desc = match.split('#')
                else:
                    desc = ''
                sv_options[name].append(desc)
    except FileNotFoundError:
        print("")


def load_options():
    load_options_from_file(rc_path)
    for (base_dir, _, plugin_files) in os.walk(home + '/.vim/plugin'):
        for plugin in plugin_files:
            plugin_fname = base_dir + '/' + plugin
            load_options_from_file(plugin_fname)


# -----------------
# CONFIG Generation
# -----------------
YOUR_CONF_BEG = '#====================== YOUR CONFIG ======================='
YOUR_CONF_END = '#=========================================================='
def generate_cfg(toStdout: bool = True):
    if not toStdout:
        try:
            if not os.path.exists(cfg_dir) or not os.path.isdir(cfg_dir):
                os.mkdir(cfg_dir)
            fd = os.open(cfg_fpath, os.O_WRONLY | os.O_TRUNC | os.O_CREAT)

            if not os.path.exists(rc_path):
                open(rc_path, 'w').close()
        except Exception as e:
            print(f'\033[91;1mError: \033[m {e.msg}', file=os.sys.stderr)
    else:
        fd = 1

    for name in sv_options.keys():
        file, value, desc = sv_options[name]
        os.write(fd, f"{name}:{file}:{value}\n".encode())
    try:
        with open(rc_path, 'r') as f:
            content = f.read()
            os.write(fd, '\n'.encode())
            reg = rf'{YOUR_CONF_BEG}\n(.*?){YOUR_CONF_END}'
            match = re.findall(reg, content, re.DOTALL)
            if match:
                os.write(fd, match[0].encode())
        os.close(fd)
    except FileNotFoundError:
        print("")

# ------------------
# CONFIG Application
# ------------------
def apply_cfg():
    if not os.access(cfg_fpath, os.F_OK):
        print_error('Config file not generated')
    else:
        # Add personnal config
        vimrc_f = open(rc_path, 'a+')
        vimrc_f.write(f"{YOUR_CONF_BEG}\n")
        with open(cfg_fpath, 'r') as cfg:
            is_personnal_config = False
            for line in cfg.readlines():
                # Handling your config
                if not line.strip():
                    is_personnal_config = True
                    continue
                elif not is_personnal_config:
                    continue
                vimrc_f.write(line)
        vimrc_f.write(f"{YOUR_CONF_END}\n")
        vimrc_f.close()

        # Apply the config for each option
        with open(cfg_fpath, 'r') as cfg:
            for line in cfg.readlines():
                # Your config beggining
                if not line.strip():
                    break

                option, file, value = line[:-1].split(':')
                if value in ['true', 'false']:
                    enable_disable([option], value)
                else:
                    change_variables([f'{option} = {value}'])
        os.unlink(cfg_fpath)


# ---------------
# Enable/ Disable
# ---------------
def enable_disable(elements: list[str], new_value: str):
    for elem in elements:
        if elem not in sv_options:
            print(f"Option \033[93;1m{elem}\033[m not found.")
            continue

        filename, value = sv_options[elem][0], sv_options[elem][1]

        if value not in ['true', 'false']:
            print(f"Option \033[93;1m{elem}\033[m isn't a boolean.")
            continue

        # Read the file
        with open(filename, 'r') as file:
            data = file.read()

        reg = re.compile(f'\ng:sp_{elem} = (true|false)')
        data = re.sub(reg, f'\ng:sp_{elem} = {new_value}', data)

        if new_value == 'true':
            print(f'{elem}: \033[92;1mon\033[m')
        else:
            print(f'{elem}: \033[91;1moff\033[m')

        # Edit the file
        with open(filename, 'w') as file:
            file.write(data)


# ------------------
#  Change Variables
# ------------------
def change_variables(elements: list[str]):

    for elem in elements:
        if '=' not in elem:
            print(f"Option \033[93;1m{elem}\033[m must have a value.")
            continue

        name, new_value = elem.split('=')

        if name not in sv_options:
            print(f"Option \033[93;1m{name}\033[m not found.")
            continue

        filename, value = sv_options[name][0], sv_options[name][1]

        # Read the file
        with open(filename, 'r') as file:
            data = file.read()

        value = value.replace('\n', '')

        reg = re.compile(f'\ng:sp_{name} = \'.*\'')

        matches = reg.findall(data)

        if not matches:
            print(f"Option \033[93;1m{name}\033[m value isn't a string.")
            continue

        data = re.sub(reg, f'\ng:sp_{name} = \'{new_value}\'', data)

        with open(filename, 'w') as file:
            file.write(data)


# ---------------
#  Change Theme
# ---------------
def changeTheme(value):
    reg_theme = re.compile(r'^g:sp_theme = (?:\'.+?\'|".+?")', re.M|re.DOTALL)
    reg_theme_bg = re.compile(r'^set background=(?:dark|light)', re.M|re.DOTALL)

    theme_elems = value.rsplit('-', 1)
    theme_bg = 'dark'
    if len(theme_elems) > 1 and theme_elems[1] in ['light', 'dark']:
        value = theme_elems[0]
        theme_bg = theme_elems[1]

    with open(rc_path, 'r') as file:
        data = file.read()
        data = re.sub(reg_theme, f'g:sp_theme = \'{value}\'', data)
        data = re.sub(reg_theme_bg, f'set background={theme_bg}', data)

    with open(rc_path, 'w') as file:
        file.write(data)

    print(f"Setting theme to: \033[96;1m{value} {theme_bg}\033[m")


# ---------------
#     Status
# ---------------
def status_display(dic: dict):
    for opt, val in dic.items():
        print(f'{opt:13} ', end='')
        if val[1] == 'true':
            print('\033[92;1mon \033[m', end='')
        elif val[1] == 'false':
            print('\033[91;1moff\033[m', end='')
        else:
            print(f'\033[96;1m{val[1]}\033[m', end='')
        print(f' ({val[2].strip()})' if val[2] else '')


def status():
    general = {k: v for k, v in sv_options.items() if rc_path == v[0]}
    print("\033[1m-- GENERAL --\033[m")
    status_display(general)
    plugins = {k: v for k, v in sv_options.items() if rc_path != v[0]}
    if plugins:
        print("\033[1m\n-- PLUGINS --\033[m")
        status_display(plugins)


if __name__ == '__main__':
    load_options()
    # generate_cfg(False)
    # apply_cfg()

    opts = getOptions()

    # Implement the logic for each option
    if opts.status:
        status()
    elif opts.version:
        suprapack_launcher('info')
    elif opts.save_conf:
        generate_cfg(False)
    elif opts.apply_conf:
        apply_cfg()
    elif opts.uninstall:
        suprapack_launcher('uninstall')
    elif opts.update:
        suprapack_launcher('update')
    else:
        if opts.disabled:
            disabled = parse_options(opts.disabled)
            enable_disable(disabled, 'false')
        if opts.enabled:
            enabled = parse_options(opts.enabled)
            enable_disable(enabled, 'true')
        if opts.set:
            change_variables(opts.set)
        if opts.theme:
            changeTheme(opts.theme)
