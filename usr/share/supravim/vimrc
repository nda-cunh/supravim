vim9script
#**** SUPRAVIM ****"
set nocompatible
filetype off

pathogen#infect()
pathogen#helptags()

g:sp_mouse = true
g:sp_swap = true
g:sp_tree = false 
g:sp_norme = true 
g:sp_nobackground = true 

filetype plugin indent on
#--------------- jeu de couleur ---------------"
syntax on

colorscheme onehalf
set background=dark
set t_Co=256

if (has("termguicolors"))
	set termguicolors
endif

if g:sp_nobackground == true
	hi Normal guibg=NONE ctermbg=NONE
endif


#-------------- Save Undo  ------------"
silent! system("!chmod 777 -R ~/.cache/vim && chown -R $USER ~/.cache/vim")
if !isdirectory($HOME .. "/.cache/vim/undo")
	silent! mkdir($HOME .. "/.cache/vim/", "", 0770)
	silent! mkdir($HOME .. "/.cache/vim/undo", "", 0770)
endif

set undodir=~/.cache/vim/undo
set undofile

# -------------  DBG integration  --------------"

packadd! termdebug
g:termdebug_wide = 1

#-------------- Auto Pairs ---------------------"
inoremap <silent><CR>		<CR><Plug>AutoPairsReturn

#--------------- Onglets ---------------------"
noremap <c-n>					<esc>:tabnew 
noremap <C-Right>				:tabnext<CR>
noremap <C-Left>				:tabprevious<CR>
inoremap <C-Right>				<esc>:tabnext<CR>
inoremap <C-Left>				<esc>:tabprevious<CR>

#--------------- Racourcis --------------"
map		<c-f>		fl
noremap <C-Up>		<Esc>:call Ctags()<CR>
noremap <C-Down>	<Esc><C-T>
inoremap <C-Up>		<Esc>:call Ctags()<CR>i
inoremap <C-Down>	<Esc><C-T>i
inoremap <c-q>		<esc>:call Quit()<CR>
inoremap <c-s>		<esc>:call Save()<CR>
noremap <c-q>		<esc>:call Quit()<CR>
noremap <c-s>		<esc>:call Save()<CR>
noremap <C-F5> 		:Termdebug -n <CR>
noremap <F5> 		:call Make("run")<CR>
inoremap <F5>		<Esc>:call Make("run")<CR>
noremap <F6>		:call Make("run2")<CR>
inoremap <F6>		<Esc>:call Make("run2")<CR>
noremap <F7> 		:call Make("run3")<CR>
inoremap <F7>		<Esc>:call Make("run3")<CR>
noremap <C-d>		:vs 
noremap <S-d>		:split 
noremap <S-Right>	<C-w><Right><Esc>:AirlineRefresh<CR>
noremap <S-Left>	<C-w><Left><Esc>:AirlineRefresh<CR>
noremap <S-Up>		<C-w><Up><Esc>:AirlineRefresh<CR>
noremap <S-Down>	<C-w><Down><Esc>:AirlineRefresh<CR>
inoremap <TAB>		<TAB>
inoremap <C-g>		<esc>:NERDTreeTabsToggle<CR>
noremap <C-g>		:NERDTreeTabsToggle<CR>
noremap <S-T>		<Esc>:term ++rows=15<CR>
nnoremap <S-Tab>	<<
nnoremap <Tab>		>>
vnoremap <S-Tab>	<<<esc>gv
vnoremap <Tab>		>><esc>gv
noremap <c-@>		:LspHover<cr>

if expand("$XDG_SESSION_TYPE") == "wayland"
	inoremap <c-v>	<esc>:r !wl-paste<cr>i
	vnoremap <c-c>	:silent! w !wl-copy<cr>i
else
	inoremap <c-v>	<esc>:r !xclip -o -selection clipboard<cr>i
	vnoremap <c-c>	:silent! w !xclip -i -selection clipboard<cr>i
endif

#---------------      Command        ---------------"
cmap <c-q>	q!<cr>
cmap <c-s>	w!<cr>
cmap <F5>	Make 
cmap <c-v>	<c-r>0<del>

#---------------      Terminal        ---------------"
tnoremap <C-q> q<CR>
tnoremap <F3> clear -x ; norminette<CR>
tnoremap <F5> supramake run<CR>
tnoremap <F6> supramake run2<CR>
tnoremap <F7> supramake run3<CR>
tnoremap <esc>	<c-\><c-n>

tnoremap <S-Right>		<C-W>N<C-w><Right><Esc>:AirlineRefresh<CR>
tnoremap <S-Left>		<C-W>N<C-w><Left><Esc>:AirlineRefresh<CR>
tnoremap <S-Up>			<C-W>N<C-w><Up><Esc>:AirlineRefresh<CR>
tnoremap <S-Down>		<C-W>N<C-w><Down><Esc>:AirlineRefresh<CR>

#--------------- utilitaires basiques ---------------"
if g:sp_mouse == true
	set mouse=a
endif
if g:sp_swap == false 
	set noswapfile
endif
set cursorline
set nu
set incsearch
set autochdir
set title
set wildmenu
set tabstop=4
set shiftwidth=4
set smartindent
set autoindent
set shiftround
set showmode
set backspace=indent,eol,start
set pumheight=50
set timeoutlen=135
set encoding=utf-8
set splitbelow
set splitright
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
g:UltiSnipsExpandTrigger = "<Tab>"
set fillchars=vert:│
auto BufEnter,VimEnter *.tpp set filetype=cpp
silent! system($HOME .. "/.local/share/supravim/add_config_rc")


#------------------ Snipets --------------------"
g:UltiSnipsExpandTrigger = "<tab>"
g:UltiSnipsJumpForwardTrigger = "<tab>"
g:UltiSnipsJumpBackwardTrigger = "<S-tab>"

#--------------- CLANG COMPLETER ---------------"
set noinfercase
set completeopt-=preview
set completeopt+=menuone,noselect
g:mucomplete#enable_auto_at_startup = 1

#--------------- PL NERDTREE ---------------"
g:rainbow_active = 1
if g:sp_tree == true
g:nerdtree_tabs_open_on_console_startup = 1
endif
g:NERDTreeIgnore = ['\.png$\', '\.jpg$', '\.o$']
g:NERDTreeWinSize = 27

#--------------- FONCTION ---------------"
def g:Save()
	silent w!
	echo "save ! " .. expand('%c')
enddef

def g:Quit()
	q!
enddef

command -nargs=+ -bar MakeHeader :call FctsToHeader( split('<args>') )

#TODO
def FctsToHeader(...itemlist: list<string>)
	for files_input in itemlist
		var f = files_input
		exec ":r !IFS=$'\\n'; for fct in $(cat "files_input" | grep -Eo \"^[a-z].*)$\" | grep -v \"[^*a-z\_]main(\" | grep -v \"^static\"); do echo \"$fct;\"; done"
	endfor
enddef

command -nargs=+ -bar Make :call Make( '<args>' )

def g:Make(rules: string)
	w!
	silent exec "!clear -x"
	redraw!
	setenv('rulesmake', rules)
	! supramake $rulesmake
enddef

def g:Compile()
	w!
	silent g:Make('all')
	redraw!
enddef

imap <C-F5>		<esc>:Gdbs<CR>
map <C-F5>		<esc>:Gdbs<CR>

command -nargs=0 -bar Gdbs :call Gdbf()

def g:Gdbf()
	if &filetype != 'c' && &filetype != 'cpp' && &filetype != 'vala' && &filetype != 'hpp'
		echo "Tu veux débugguer quoi là ?"
	else
		set splitbelow nosplitbelow
		set splitright nosplitright
		exec ":NERDTreeTabsClose"
		if !filereadable("Makefile")
			exec ":Termdebug -n ./a.out"
		else
			exec ":Termdebug -n"
		endif
	endif
	set splitbelow
	set splitright
enddef               
# -------------- Ctags ----------------"

command -nargs=0 -bar Ctags :call Ctags()

set tags=$HOME/.local/share/tags

g:notags = false
def g:Ctags()
	if g:notags == true 
		LspDefinition
		return
	endif
	system("suprapack run supratags " .. expand('%:e'))
	if v:shell_error == 42
		LspDefinition
		g:notags = true
	else
		execute "tag " .. expand("<cword>")
	endif
enddef

# -------------- COLORS FILE ----------------"
def NERDTreeHighlightFile(extension: string, fg: string, bg: string)
	exec 'autocmd filetype nerdtree highlight ' .. extension .. ' ctermbg=' .. bg .. ' ctermfg=' .. fg
	exec 'autocmd filetype nerdtree syn match ' .. extension .. ' #^\s\+.*' .. extension .. '$#'
enddef

NERDTreeHighlightFile('.c', 'blue', 'none')
NERDTreeHighlightFile('h', 'green', 'none')
NERDTreeHighlightFile('.cpp', 'blue', 'none')
NERDTreeHighlightFile('.hpp', 'green', 'none')
NERDTreeHighlightFile('vala', 'magenta', 'none')
NERDTreeHighlightFile('vapi', 'darkmagenta', 'none')
NERDTreeHighlightFile('py', 'yellow', 'none')
NERDTreeHighlightFile('java', 'red', 'none')
NERDTreeHighlightFile('sh', 'green', 'none')
NERDTreeHighlightFile('go', 'cyan', 'none')
NERDTreeHighlightFile('Makefile', 'red', 'none')

augroup nerdtreeconcealbrackets
	autocmd!
	autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=ALL
	autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=ALL
augroup END

# ----------------- AIR LINE ------------------"
g:airline_section_z = airline#section#create(['%p/100%%', ' Line: %l', 'hunks', ' Col:%c', ' SupraVim'])
if expand('%:e') == ''
	g:airline_section_warning = airline#section#create(['SupraVim'])
	g:airline_section_z = airline#section#create(['%p/100%%', ' Line: %l', 'hunks', ' Col:%c'])
	g:airline_section_b = airline#section#create([' im'])
endif
g:airline_section_b = airline#section#create([' im'])
g:airline_left_sep = ''
g:airline_left_alt_sep = ''
g:airline_right_sep = ''
g:airline_right_alt_sep = ''
g:airline#extensions#tabline#enabled = 1
g:airline#extensions#tabline#show_buffers = 0
g:airline#extensions#tabline#tabs_label = 'Tabs'
g:airline#extensions#tabline#buffer_nr_show = 0
g:airline#extensions#tabline#tab_nr_type = 1
g:airline#extensions#tabline#left_sep = ''
g:airline#extensions#tabline#left_alt_sep = ''
g:airline#extensions#tabline#right_sep = ''
g:airline#extensions#tabline#right_alt_sep = ''

# ----------------- POPUP ------------------ #
autocmd VimEnter * CreatePopit()
hi MyPopupColor ctermfg=cyan

autocmd VimLeave * RemovePopit()

def CreatePopit()
	g:file_tmp = system("strings -n 1 < /dev/urandom | grep -o '[[:alpha:][:digit:]]' | head -c15 | tr -d '\n'")
	var s = system("suprapack have_update supravim > /tmp/xdfe-" .. g:file_tmp .. "&")
	var timer = timer_start(3000, (_) => {
		CreatePop()
	     })
enddef

def RemovePopit()
	var s = system("rm -f /tmp/xdfe-" .. g:file_tmp)
enddef

def CreatePop()
    var s = system("cat /tmp/xdfe-" .. g:file_tmp .. " ; rm /tmp/xdfe-" .. g:file_tmp)
    if s == ""
        return
    endif
    popup_create([ strpart("       ", 0, len(s) / 2 - 7) .. "Supravim update", s, "run: `suprapack update`" ], {line: 1, col: 500, pos: 'topright', time: 5000, tabpage: -1, zindex: 300, drag: 1, highlight: 'MyPopupColor', border: [], close: 'click', padding: [0, 1, 0, 1], })
enddef

if executable('lsp_c')
	au User lsp_setup call lsp#register_server({
				\ name: 'lsp_c',                                              
				\ cmd: (server_info) => ['lsp_c'],
				\ allowlist: ['cpp', 'c'],
				\ })
endif

if executable('vala-language-server')
	au User lsp_setup call lsp#register_server({
				\ name: 'vala-language-server',                                              
				\ cmd: (server_info) => ['vala-language-server'],
				\ allowlist: ['vala'],
				\ })
endif

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ name: 'file',
    \ allowlist: ['*'],
    \ priority: 2,
    \ completor: function('asyncomplete#sources#file#completor')
    \ }))

imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

g:lsp_log_file = '/tmp/lsp_supravim-' .. expand('$USER') .. '.log'
g:vsnip_snippet_dir = '$HOME/.local/share/supravim/data/snippets'
g:lsp_document_code_action_signs_enabled = 0
g:lsp_diagnostics_echo_cursor = 1
g:lsp_diagnostics_echo_delay = 50
g:lsp_diagnostics_virtual_text_enabled = 0


def g:MoveLineDown(mode: string)
	var array = getline(line("'<"), line("'>"))
	var len = len(array)
	var begin = line('.')

	if mode == 'n'
		var tmp = getline(line('.') + 1)
		setline(line('.') + 1, getline(line('.')))
		setline(line('.'), tmp)
		normal j
		return
	elseif line("'<") != begin 
		return
	endif

	var tmp = getline(begin + len)
	var i = 0 
	reverse(array)

	for str in array
		setline(begin + len - i, str)
		i = i + 1
	endfor
	setline(begin, tmp)
	setpos("'<", [0, begin + 1, 0, 0])
	setpos("'>", [0, begin + len, 0, 0])
	normal! gv
enddef

def g:MoveLineUp(mode: string)
	var array = getline(line("'<"), line("'>"))
	var len = len(array)
	var begin = line('.')
	
	if begin == 1
		return
	elseif mode == 'n'
		var tmp = getline(line('.') - 1)
		setline(line('.') - 1, getline(line('.')))
		setline(line('.'), tmp)
		normal k
		return
	endif
	
	if line("'<") != begin 
		return
	endif

	var tmp = getline(line('.') - 1)
	var i = begin
	for str in array
		setline(i - 1, str)
	 	i = i + 1	
	endfor
	setline(i - 1, tmp)
	
	setpos("'<", [0, begin - 1, 0, 0])
	setpos("'>", [0, begin + len - 2, 0, 0])
	normal! gv
enddef


vnoremap <A-Down> :<c-u>call MoveLineDown("v")<CR>
vnoremap <A-Up> :<c-u>call MoveLineUp("v")<CR>
nnoremap <A-Down> :<c-u>call MoveLineDown("n")<CR>
nnoremap <A-Up> :<c-u>call MoveLineUp("n")<CR>

# Search Ctrl + F
map <c-f> \fl
imap <c-f> \fl
