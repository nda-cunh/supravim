vim9script
#**** SUPRAVIM ****"
set nocompatible
filetype off

pathogen#infect()
pathogen#helptags()

g:sp_swap = false			# create swapfile (.swp)
g:sp_tree = true			# display folder tree at left
g:sp_fold = false			# add fold support 
g:sp_nobackground = false	# remove background color and use your terminal background
g:sp_theme = 'onehalf'

filetype plugin indent on
#--------------- jeu de couleur ---------------"
syntax on

exec 'colorscheme ' .. g:sp_theme
set background=dark
set t_Co=256

if (has("termguicolors"))
	set termguicolors
endif

if g:sp_nobackground == true
	hi Normal guibg=NONE ctermbg=NONE
endif

#------------- Cursor Parts ------------"
&t_SI = "\<Esc>[5 q"
&t_SR = "\<Esc>[3 q"
&t_EI = "\<Esc>[2 q"
autocmd VimLeave * !echo -ne "\e[0 q"

#-------------- Save Undo  ------------"

set undodir=~/.cache/vim/undo
set undofile

# -------------  DBG integration  --------------"
packadd! termdebug
g:termdebug_wide = 1

#-------------- Auto Pairs ---------------------"
inoremap <silent><CR>	<CR><Plug>AutoPairsReturn

#--------------- Onglets ---------------------"
nnoremap <c-n>			<esc>:tabnew 
nnoremap <C-Right>		<scriptcmd>tabnext<CR>
nnoremap <C-Left>		<scriptcmd>tabprevious<CR>
inoremap <C-Right>		<scriptcmd>tabnext<CR>
inoremap <C-Left>		<scriptcmd>tabprevious<CR>

#--------------- Racourcis --------------"
nmap	<c-f>		fl
nnoremap <C-Up>		<ScriptCmd>call Ctags()<CR>
nnoremap <C-Down>	<Esc><C-T>
inoremap <C-Up>		<Esc>:call Ctags()<CR>i
inoremap <C-Down>	<Esc><C-T>i
inoremap <c-q>		<cmd>q!<CR>
noremap <c-q>		<cmd>q!<CR>
inoremap <c-s>		<cmd>w!<CR>
noremap <c-s>		<cmd>w!<CR>
nnoremap <C-F5> 	<cmd>Termdebug -n <CR>
nnoremap <F5> 		<ScriptCmd>call Make("run")<CR>
inoremap <F5>		<ScriptCmd>call Make("run")<CR>
nnoremap <F6>		<ScriptCmd>call Make("run2")<CR>
inoremap <F6>		<ScriptCmd>call Make("run2")<CR>
nnoremap <F7> 		<ScriptCmd>call Make("run3")<CR>
inoremap <F7>		<ScriptCmd>call Make("run3")<CR>
nnoremap <C-d>		:vs 
nnoremap <S-d>		:split 
nnoremap <S-Right>	<C-w><Right>
nnoremap <S-Left>	<C-w><Left>
nnoremap <S-Up>		<C-w><Up>
nnoremap <S-Down>	<C-w><Down>
inoremap <TAB>		<TAB>
inoremap <C-g>		<cmd>NERDTreeTabsToggle<CR>
nnoremap <C-g>		<cmd>NERDTreeTabsToggle<CR>
nnoremap <S-t>		<Esc>:term ++rows=15<CR>
nnoremap <S-Tab>	<<
nnoremap <Tab>		>>
vnoremap <S-Tab>	<<<esc>gv
vnoremap <Tab>		>><esc>gv
nnoremap <c-@>		<cmd>LspHover<cr>
inoremap <c-a>		<esc>gg<s-v>G

#---------------      Copy - Paste      ---------------"
if expand("$XDG_SESSION_TYPE") == "wayland"
	inoremap <c-v>	<esc>:r !wl-paste<cr>i
	vnoremap <c-c>	y:call Copy_func('wl-copy')<cr>i
else
	inoremap <c-v>	<esc>:r !xclip -o -selection clipboard<cr>i
	vnoremap <c-c>	y:call Copy_func('xclip -i -selection clipboard')<cr>i
endif

def g:Copy()
	echo "Copy"
	if expand("$XDG_SESSION_TYPE") == "wayland"
		g:Copy_func('wl-copy')
	else
		g:Copy_func('xclip -i -selection clipboard')
	endif
enddef

def g:Paste()
	if expand("$XDG_SESSION_TYPE") == "wayland"
		r!wl-paste
	else
		r!xclip -o -selection clipboard
	endif
enddef

def g:Copy_func(copy_os: string)
	var escape_text = shellescape(getreg('0'))
	system('echo -En ' .. escape_text .. ' | ' .. copy_os)
	redraw!
enddef

#---------------      Command        ---------------"
cmap <c-q>	q!<cr>
cmap <c-s>	w!<cr>
cmap <F5>	Make 
cmap <c-v>	<c-r>0<del>

#---------------      Terminal        ---------------"
tnoremap <C-q> exit<CR>
tnoremap <F3> clear -x ; norminette<CR>
tnoremap <F5> supramake run<CR>
tnoremap <F6> supramake run2<CR>
tnoremap <F7> supramake run3<CR>
tnoremap <esc>	<c-\><c-n>

tnoremap <S-Right>		<C-W>N<C-w><Right>
tnoremap <S-Left>		<C-W>N<C-w><Left>
tnoremap <S-Up>			<C-W>N<C-w><Up>
tnoremap <S-Down>		<C-W>N<C-w><Down>

#--------------- utilitaires basiques ---------------"
set mouse=a
if g:sp_swap == false 
	set noswapfile
endif
set cursorline
set nu
set incsearch
set noautochdir
silent! var project_root = system('suprabear -p')
if v:shell_error == 0
	silent! exec 'chdir ' .. project_root
else
	set autochdir
endif
set title
set wildmenu
set tabstop=4
set shiftwidth=4
set smartindent
set autoindent
set shiftround
set showmode
set backspace=indent,eol,start
set pumheight=50
set notimeout
set ttimeout
set timeoutlen=100
set encoding=utf-8
set splitbelow
set splitright
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
set fillchars=vert:│
auto BufEnter,VimEnter *.tpp set filetype=cpp
silent! system($HOME .. "/.local/share/supravim/add_config_rc")

#--------------- CLANG COMPLETER ---------------"
set noinfercase
set completeopt-=preview
set completeopt+=menuone,noselect
g:mucomplete#enable_auto_at_startup = 1

#--------------- PL NERDTREE ---------------"
g:rainbow_active = 1
if g:sp_tree == true
g:nerdtree_tabs_open_on_console_startup = 1
endif
g:NERDTreeIgnore = ['\.png$\', '\.jpg$', '\.o$']
g:NERDTreeWinSize = 27

#--------------- FONCTION ---------------"

def GotOutput(channel: channel, msg: string)
	# change_theme: [onehalf] <dark>
	if matchstr(msg, '^change_theme: ') != ''
		var theme = matchstr(msg, '\[\zs.*\ze\]')
		var typemode = matchstr(msg, '<\zs.*\ze>')

		exec 'colorscheme ' .. theme
		exec 'set background=' .. typemode
		AirlineRefresh
	endif
enddef

def g:SettingsSupravim()
	job_start(["supravim-gui"], {
		out_cb: GotOutput,
	})
enddef

if g:sp_fold == true
	auto BufEnter * call LoadBuf()
	def LoadBuf()
		var l = line('.')
		silent! loadview
		cursor(l, 1)
	enddef

	auto BufWritePost * call Save_post()
	def Save_post()
		silent! NERDTreeRefreshRoot
		silent! NERDTreeRefreshRoot
		mkview
	enddef
endif


# Compilation and SupraMake

command -nargs=+ -bar Make :call Make( '<args>' )

def g:Make(rules: string)
	w!
	setenv('rulesmake', rules)
	! supramake --clean $rulesmake
	redraw!
enddef

def g:Compile()
	w!
	silent g:Make('all')
	redraw!
enddef

imap <C-F5>		<esc>:Gdbs<CR>
map <C-F5>		<esc>:Gdbs<CR>

command -nargs=0 -bar Gdbs :call Gdbf()

def g:Gdbf()
	if &filetype != 'c' && &filetype != 'cpp' && &filetype != 'vala' && &filetype != 'hpp'
		echo "Tu veux débugguer quoi là ?"
	else
		set splitbelow nosplitbelow
		set splitright nosplitright
		exec ":NERDTreeTabsClose"
		if !filereadable("Makefile")
			exec ":Termdebug -n ./a.out"
		else
			exec ":Termdebug -n"
		endif
	endif
	set splitbelow
	set splitright
enddef               
# -------------- Ctags ----------------"

command -nargs=0 -bar Ctags :call Ctags()

set tags=$HOME/.cache/tags

g:notags = false
def g:Ctags()
	if g:notags == true 
		LspDefinition
		return
	endif
	system("suprapack run supratags -y")
	if v:shell_error == 42
		LspDefinition
		g:notags = true
	else
		execute "tag " .. expand("<cword>")
	endif
enddef

# -------------- COLORS FILE ----------------"
def NERDTreeHighlightFile(extension: string, fg: string, bg: string)
	exec 'autocmd filetype nerdtree highlight ' .. extension .. ' ctermbg=' .. bg .. ' ctermfg=' .. fg
	exec 'autocmd filetype nerdtree syn match ' .. extension .. ' #^\s\+.*' .. extension .. '$#'
enddef

NERDTreeHighlightFile('.c', 'blue', 'none')
NERDTreeHighlightFile('h', 'green', 'none')
NERDTreeHighlightFile('.cpp', 'blue', 'none')
NERDTreeHighlightFile('.hpp', 'green', 'none')
NERDTreeHighlightFile('vala', 'magenta', 'none')
NERDTreeHighlightFile('vapi', 'darkmagenta', 'none')
NERDTreeHighlightFile('py', 'yellow', 'none')
NERDTreeHighlightFile('java', 'red', 'none')
NERDTreeHighlightFile('sh', 'green', 'none')
NERDTreeHighlightFile('go', 'cyan', 'none')
NERDTreeHighlightFile('Makefile', 'red', 'none')

augroup nerdtreeconcealbrackets
	autocmd!
	autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=ALL
	autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=ALL
augroup END

# ----------------- AIR LINE ------------------"
g:airline_section_z = airline#section#create(['%p/100%%', ' Line: %l', 'hunks', ' Col:%c', ' SupraVim'])
if expand('%:e') == ''
	g:airline_section_warning = airline#section#create(['SupraVim'])
	g:airline_section_z = airline#section#create(['%p/100%%', ' Line: %l', 'hunks', ' Col:%c'])
	g:airline_section_b = airline#section#create([' im'])
endif
g:airline_section_b = airline#section#create([' im'])
g:airline_left_sep = ''
g:airline_left_alt_sep = ''
g:airline_right_sep = ''
g:airline_right_alt_sep = ''
g:airline#extensions#tabline#enabled = 1
g:airline#extensions#tabline#show_buffers = 0
g:airline#extensions#tabline#tabs_label = 'Tabs'
g:airline#extensions#tabline#buffer_nr_show = 0
g:airline#extensions#tabline#tab_nr_type = 1
g:airline#extensions#tabline#left_sep = ''
g:airline#extensions#tabline#left_alt_sep = ''
g:airline#extensions#tabline#right_sep = ''
g:airline#extensions#tabline#right_alt_sep = ''

# ----------------- POPUP ------------------ #
autocmd VimEnter * CreatePopit()
hi MyPopupColor ctermfg=cyan

autocmd VimLeave * RemovePopit()

def CreatePopit()
	g:file_tmp = system("strings -n 1 < /dev/urandom | grep -o '[[:alpha:][:digit:]]' | head -c15 | tr -d '\n'")
	var s = system("suprapack have_update supravim > /tmp/xdfe-" .. g:file_tmp .. "&")
	var timer = timer_start(3000, (_) => {
		CreatePop()
	})
enddef

def RemovePopit()
	call delete('/tmp/xdfe-' .. g:file_tmp)
enddef

def CreatePop()
	var lst_s = readfile('/tmp/xdfe-' .. g:file_tmp)
	call delete('/tmp/xdfe-' .. g:file_tmp)
	var s = join(lst_s, "\n")
    if s == ""
        return
    endif
    popup_create([ strpart("       ", 0, len(s) / 2 - 7) .. "Supravim update", s, "run: `suprapack update`" ], {line: 1, col: 500, pos: 'topright', time: 5000, tabpage: -1, zindex: 300, drag: 1, highlight: 'MyPopupColor', border: [], close: 'click', padding: [0, 1, 0, 1], })
enddef

# -----------------   Alt Up/Down   ------------------ #
def g:MoveLineDown(mode: string)
	var array = getline(line("'<"), line("'>"))
	var len = len(array)
	var begin = line('.')

	if mode == 'n'
		var tmp = getline(line('.') + 1)
		setline(line('.') + 1, getline(line('.')))
		setline(line('.'), tmp)
		normal j
		return
	elseif line("'<") != begin 
		return
	endif

	var tmp = getline(begin + len)
	var i = 0 
	reverse(array)

	for str in array
		setline(begin + len - i, str)
		i = i + 1
	endfor
	setline(begin, tmp)
	setpos("'<", [0, begin + 1, 0, 0])
	setpos("'>", [0, begin + len, 0, 0])
	normal! gv
enddef

def g:MoveLineUp(mode: string)
	var array = getline(line("'<"), line("'>"))
	var len = len(array)
	var begin = line('.')
	
	if begin == 1
		return
	elseif mode == 'n'
		var tmp = getline(line('.') - 1)
		setline(line('.') - 1, getline(line('.')))
		setline(line('.'), tmp)
		normal k
		return
	endif
	
	if line("'<") != begin 
		return
	endif

	var tmp = getline(line('.') - 1)
	var i = begin
	for str in array
		setline(i - 1, str)
	 	i = i + 1	
	endfor
	setline(i - 1, tmp)
	
	setpos("'<", [0, begin - 1, 0, 0])
	setpos("'>", [0, begin + len - 2, 0, 0])
	normal! gv
enddef

vnoremap <silent> <A-Down>	:<c-u>call MoveLineDown("v")<CR>
vnoremap <silent> <A-Up>	:<c-u>call MoveLineUp("v")<CR>
nnoremap <silent> <A-Down>	:<c-u>call MoveLineDown("n")<CR>
nnoremap <silent> <A-Up>	:<c-u>call MoveLineUp("n")<CR>

# Fuzzy Finder
nnoremap <silent> <space>g <scriptcmd>FuzzyGrep<CR>
nnoremap <silent> <space>f <scriptcmd>FuzzyFiles<CR>
nnoremap <silent> <space>s <scriptcmd>FuzzyInBuffer<CR>
nnoremap <silent> <space>c <scriptcmd>FuzzyCommands<CR>
nnoremap <silent> <space>b <scriptcmd>FuzzyBuffers<CR>
nnoremap <silent> <space>h <scriptcmd>FuzzyHighlights<CR>
nnoremap <silent> <space>m <scriptcmd>FuzzyMRUFiles<CR>
# Search Ctrl + F
nnoremap <silent> <space><space> <scriptcmd>FuzzyBuffers<CR>
nnoremap <silent><c-f> <scriptcmd>FuzzyGrep<CR>

g:files_respect_gitignore = 1
g:fuzzyy_files_ignore_file = ['compile_commands.json', '*.beam', '*.so', '*.exe', '*.dll', '*.dump', '*.core', '*.swn', '*.swp']
g:fuzzyy_files_ignore_dir = ['.git', '.hg', '.svn', '.rebar', '.eunit']

# SupraVim Settings Sync
inoremap <F12>	<scriptcmd>call SettingsSupravim()<cr>
noremap <F12>	<scriptcmd>call SettingsSupravim()<cr>

nnoremap <RightMouse> <esc><LeftMouse><esc><RightMouse>
inoremap <RightMouse> <esc><LeftMouse><esc><RightMouse>
nnoremap <c-leftmouse>	<leftmouse><cmd>call Ctags()<cr>

# Popup Menu --------------------------------------

set mousemodel=popup
autocmd BufEnter * call Init_menu()
def Init_menu()
	unmenu *
	unmenu! *
	aunmenu *

	vmenu PopUp.Copy			y:call Copy()<cr><esc>
	vmenu PopUp.Cut				ygvd:call Copy()<cr><esc>
	vmenu PopUp.Past			:call Paste()<cr><esc>
	vmenu PopUp.SelectAll		<esc>gg<s-v>G
	if g:sp_fold
		vmenu PopUp.Fold			zf 
	endif
	vmenu PopUp.Equalize		=
	vmenu PopUp.-sep4- <Nop>

	nmenu PopUp.Show-References	<esc>:LspReferences<cr>
	nmenu PopUp.-sep5- <Nop>
	nmenu PopUp.Save-All		:wall<CR>
	nmenu PopUp.Auto-Norm		<F2>
	nmenu PopUp.Switch-Norm		<F3>
	nmenu PopUp.-sep0- <Nop>
	nmenu PopUp.Select-All		<esc>gg<s-v>G
	nmenu PopUp.Past			:call Paste()<cr><esc>
	nmenu PopUp.Undo			u
	nmenu PopUp.Redo			<C-r>
	nmenu PopUp.-sep2- <Nop>
	nmenu PopUp.Debug			:call Gdbf()<cr>
	nmenu PopUp.Rename-Symbol	:LspRename<cr>

	if g:sp_fold
		nmenu PopUp.-sep3- <Nop>
		nmenu PopUp.Fold			:call g:Fold()<CR>
		nmenu PopUp.UnFold			zo
		nmenu PopUp.Fold-All		:call g:FoldAll()<CR>
		nmenu PopUp.UnFold-All		zR
	endif
	nmenu PopUp.-sep4- <Nop>
	nmenu PopUp.SupraVim-Settings :call SettingsSupravim()<CR>
enddef

# Fold support --------------------------------------

if g:sp_fold == true
	def g:Fold()
		set foldmethod=syntax
		execute "normal! zc"
		set foldmethod=manual
	enddef

	def g:FoldAll()
		set foldmethod=syntax
		execute "normal! zM"
		set foldmethod=manual
	enddef
endif 

autocmd VimEnter * call Welcome()

# SetArgv --------------------------------------
command -nargs=* SetArgv :call SetArgv(<f-args>)
command -nargs=* SetArgs :call SetArgv(<f-args>)

def SetArgv(...args: list<string>)
	var str = join(args, ' ')
	$ARGS = str
enddef


# Welcome --------------------------------------
def Welcome()
	redraw!
	var timer = timer_start(100, (_) => {
		echo 'Welcome to SupraVim ! Press <F12> for help'
	})
	if g:sp_fold
		set foldmethod=manual
	endif
enddef
