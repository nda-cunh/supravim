###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# --------------
# Functions
# --------------
global !p
def printf_expand_args(snip):
	"""
	This will look how many placeholders printf has and adds the separated commas
	at the end.
	"""
	
	# now add so many "," as much as the amount of placeholders
	amount_placeholders = snip.tabstops[1].current_text.count("%")

	output = ""

	# Add the amount of tabstops
	for placeholder_index in range(3, amount_placeholders + 3):
		output += f", ${placeholder_index}"
	
	# convert them into tabstops
	snip.expand_anon(output)

endglobal

# ==============
# Snippets 
# ==============
priority -50

snippet def "#define ..."
#define $1
endsnippet

snippet ifndef "ifndef 42"
#ifndef ${1:LIBFT}_H
# define $1_H
${VISUAL}$0

#endif
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet mainv "mainv() (mainv)"
int	main(void)
{
	${VISUAL}$0
	return (0);
}
endsnippet

snippet main "main() (main)"
int	main(int argc, char *argv[])
{
	${VISUAL}$0
	return (0);
}
endsnippet

snippet mainh "main() (main headers)"
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

int	main(int argc, char *argv[])
{
	${VISUAL}$0
	return (0);
}
endsnippet

snippet for "for loop (for)"
for (${1:i} = 0; $2 < ${2:count}; ${3:++$1}) {
	${VISUAL}$0
}
endsnippet

snippet while "while loop"
while (${1:1})
{
	${VISUAL}$0
}
endsnippet

snippet write "write func"
write(${1:1}, $2, $3);${VISUAL}$0
endsnippet

snippet include "include"
#include <${1:stdio}.h>${VISUAL}$0
endsnippet

snippet if "si condition"
if ($1)
{
	${VISUAL}$0
}
endsnippet


snippet fora "for-loop" b
for (${1:var}; ${2:condition}; `!p
if len(t[1]) > 0:
	snip.rv = t[1].split('=')[0].split()[-1]
`++) {
	
	$0
} /* for ($1; $2; `!p if len(t[1]) > 0: snip.rv = t[1].split('=')[0].split()[-1]`++) */
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */})
{
	${VISUAL}$0
}
endsnippet

post_jump "printf_expand_args(snip)"
snippet "printf" "printf with auto-expand args" wr
printf("$1\n"$2);
endsnippet

snippet "ft_printf" "ft_printf with auto-expand args"
ft_printf("$1\n"$2);
endsnippet

snippet tstruct "tstruct"
typedef struct s_${1:name}{
	${VISUAL}$0
} t_$1;

endsnippet

snippet struct "struct"
struct s_${1:name}{
	${VISUAL}$0
};

endsnippet

snippet func "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet funcd "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]

def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

# vim:ft=snippets:
