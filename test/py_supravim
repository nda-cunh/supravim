#!/bin/python
import re
import os
import optparse as op

# ---------
#   UTILS
# ---------
home = os.getenv('HOME')
cfg_fpath = home + '/.local/share/supravim/supravim.cfg'
sv_options = {}


def print_error(msg: str):
    print(f"\033[1;91mError: \033[0;91m{msg}\033[m")

def replace_in_file(file: str, to_replace: str, replacement: str):
    with open(file, 'r+') as f:
        content = f.read()
        content = content.replace(to_replace, replacement)
        f.write(content)

# ----------
# Pre launch --> Generating options with plugins installed
# ----------
def load_options_from_file(file_name: str):
    with open(file_name, 'r') as file:
        content = file.read()
        matches = re.findall(r'g:sp_[a-zA-Z_]+ = (?:[a-zA-Z0-9\']+)', content)
        for match in matches:
            name, _, value = match[5:].split()
            sv_options[name] = [file_name, value]

def load_options():
    load_options_from_file(home + '/.vimrc')
    for (base_dir, _, plugin_files) in os.walk(home + '/.vim/plugin'):
        for plugin in plugin_files:
            plugin_fname = base_dir + '/' + plugin
            load_options_from_file(plugin_fname)

# -----------------
# CONFIG Generation
# -----------------
def generate_cfg(toStdout: bool = True):
    if not toStdout:
        fd = os.open(cfg_fpath, os.O_WRONLY | os.O_TRUNC | os.O_CREAT)

    for name in sv_options.keys():
        file, value = sv_options[name]
        if toStdout:
            print(f"{name}:{file}:{value}")
        else:
            os.write(fd, f"{name}:{file}:{value}\n".encode())

# ------------------
# CONFIG Application
# ------------------
def apply_cfg():
    if not os.access(cfg_fpath, os.F_OK):
        print_error('Config file not generated')
    else:
        with open(cfg_fpath, 'r') as cfg:
            for line in cfg.readlines():
                option, file, value = line[:-1].split(':')

                with open(file, 'r') as f:
                    content = f.read()

                to_replace = re.findall(fr'^g:sp_{option} = [a-zA-Z_\']+$',
                                        content, re.M)[0]
                replacement = to_replace.split('=')[0] + '= ' + value
                replace_in_file(file, to_replace, replacement)


# ---------------
# Enable/ Disable
# ---------------
def enable_disable(elements: list[str], isEnable: bool):
    for elem in elements:
        if elem not in sv_options.keys():
            print_error(f"'{elem}' not a correct option.")
            continue
        filename = sv_options[elem][0]
        replace_in_file(filename, )


if __name__ == '__main__':
    load_options()
    # generate_cfg(False)
    # apply_cfg()

    parser = op.OptionParser()
    # Add options
    # parser.add_option("-h", "--help", action="help", help="Display help")
    parser.add_option("-d", "--disable", action="append", type="string",
                      dest="disable", help="Disable options.")
    parser.add_option("-e", "--enable", action="append", type="string",
                      dest="enable", help="Enable options.")
    parser.add_option("-t", "--theme", action="store", type="string",
                      dest="theme", help="Set theme.")

    # Parse the command-line arguments
    (options, args) = parser.parse_args()

    # Implement the logic for each option
    if options.disable:
        print(f"Disabling: {', '.join(options.disable)}")
    if options.enable:
        print(f"Enabling: {', '.join(options.enable)}")
    if options.theme:
        print(f"Setting theme to: {options.theme}")
